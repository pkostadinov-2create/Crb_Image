<?php

// Returns image help text from image size name or image dimensions
function crb_get_attachment_help($args) {
	$args = crb_sanitize_image_size_args($args);

	$before = 'Largest image size: ';

	$after = ' px. Larger images will be scaled down ';
	if ( $args['crop'] ) {
		$before = 'Recommended image size: ';
		$after .= 'and cropped ';
	} else {
		$after .= 'to fit this size ';
	}
	$after .= 'automatically.';
	
	return $before . $args['width'] . ' x ' . $args['height'] . $after;
}

// Wrapper for wpthumb, in case plugin is missing
// Supports image size as 2nd attr or width, height and crop as 2nd, 3rd, 4th
function crb_wpthumb( $url, $args ) {
	if ( !function_exists('wpthumb') ) {
		return $url;
	}

	$args = crb_sanitize_image_size_args($args);
	$url = crb_sanitize_url($url);

	return wpthumb( $url, $args);
}

// Adding protocol to urls starting with //
function crb_sanitize_url($url) {
	$protocol = is_ssl() ? 'https' : 'http';
	if ( substr($url, 0, 2) === '//' ) {
		$url = $protocol . ':' . $url;
	}
	
	return $url;
}

// Parsing Args width, height and crop, or extracting them from image size.
function crb_sanitize_image_size_args($args) {
	if ( !is_array($args) ) {
		global $_wp_additional_image_sizes;
		if ( !empty($_wp_additional_image_sizes[ $args ]) ) {
			$current_size = $_wp_additional_image_sizes[ $args ];
		} else {
			$current_size = crb_get_unregistered_image_size($args);
		}

		if (!empty($current_size)) {
			$args = $current_size;
		}
	}

	return wp_parse_args($args, array(
		'width' => 0,
		'height' => 0,
		'crop' => false,
	));
}

// Verify that the image size is registered and generated by WP
function crb_is_image_size_registered($image_size) {
	global $_wp_additional_image_sizes;
	if ( is_string($image_size) && !empty($_wp_additional_image_sizes[ $image_size ]) ) {
		return true;
	} else {
		return false;
	}
}

// Extraction Image Src From Image ID and Image size
function crb_wp_get_attachment_image_src($image_id, $args) {
	if ( empty($image_id)) {
		return;
	}

	$size = 'full';
	if ( crb_is_image_size_registered($args) ) {
		$size = $args;
	}

	// Validates the image size
	if ( is_numeric($image_id) ) {
		$image_data = wp_get_attachment_image_src($image_id, $size);
		if ( empty($image_data[0]) ) {
			return;
		}

		$image_src = $image_data[0];
	} else {
		$image_src = $image_id;
	}

	if ( !crb_is_image_size_registered($args) ) {
		$image_src = crb_wpthumb($image_src, $args);
	}

	return $image_src;
}

// Extraction Image With Width and Height From Image ID and Image size, Supports additional atts
function crb_wp_get_attachment_image($image_id, $args, $additional_atts = array()) {
	if ( empty($image_id) ) {
		return;
	}

	// Fallback
	if ( !function_exists('wpthumb') ) {
		if ( is_array($args) ) {
			$args = array($args['width'], $args['height']);
		}

		return wp_get_attachment_image($image_id, $args);
	}

	// Default Additional Atts
	$additional_atts = wp_parse_args($additional_atts, array(
		'class' => '',
	));

	// Add Image Size name as class
	$additional_atts['class'] .= is_string($args) ? ' ' . $args : '';

	$image_src = crb_wp_get_attachment_image_src($image_id, $args);
	$args = crb_sanitize_image_size_args($args);

	// Prepare the $args array for wpthumb_img_shortcode
	array_unshift($args, $image_src);
	$args = array_merge($args, $additional_atts);

	return @wpthumb_img_shortcode($args);
}

// Using custom image sizes, that are not registered in wordpress for automatic cropping
// This is for Preformance reasons, and cleaner FTP
function crb_get_unregistered_image_size($name) {
	$unregistered_image_sizes = array(
		'crb_home_nav_entries' => array(
			'width' => 80,
			'height' => 80,
			'crop' => false,
			'retina' => 2,
		),
		'crb_admin_column' => array(
			'width' => 100,
			'height' => 100,
			'crop' => false,
		),
	);

	if ( empty($unregistered_image_sizes[$name]) ) {
		// On callign with unexisting image size, will return 'full'.
		// This is safe, because it is meant to be used within other functions leading to crb_sanitize_image_size_args()
		return 'full';
	}

	return $unregistered_image_sizes[$name];
}

// Returns thumbnail from ID, Callback for admin columns
function crb_column_render_post_thumbnail( $post_id ) {
	if ( has_post_thumbnail( $post_id ) ) {
		$thumbnail = crb_wp_get_attachment_image( get_post_thumbnail_id($post_id), 'crb_admin_column', array('style' => 'vertical-align: middle;') );
	} else {
		$thumbnail = '';
	}

	return $thumbnail;
}